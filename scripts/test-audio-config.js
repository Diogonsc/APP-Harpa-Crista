#!/usr/bin/env node

console.log('üîç Testando configura√ß√µes de √°udio...\n');

// Verificar se expo-av est√° instalado
try {
  const packageJson = require('../package.json');
  const hasExpoAv = packageJson.dependencies && packageJson.dependencies['expo-av'];

  if (hasExpoAv) {
    console.log('‚úÖ expo-av est√° instalado');
  } else {
    console.log('‚ùå expo-av N√ÉO est√° instalado');
  }
} catch (error) {
  console.log('‚ùå Erro ao ler package.json:', error.message);
}

// Verificar arquivo AudioServiceEnhanced
const fs = require('fs');
const audioServicePath = 'src/services/audioServiceEnhanced.ts';

if (fs.existsSync(audioServicePath)) {
  const content = fs.readFileSync(audioServicePath, 'utf8');
  
  // Verificar se as configura√ß√µes corretas est√£o presentes
  const hasCorrectInterruptionMode = content.includes('Audio.InterruptionModeIOS.DoNotMix');
  const hasCorrectPitchCorrection = content.includes('Audio.PitchCorrectionQuality.High');
  
  if (hasCorrectInterruptionMode) {
    console.log('‚úÖ Configura√ß√£o interruptionModeIOS correta');
  } else {
    console.log('‚ùå Configura√ß√£o interruptionModeIOS incorreta');
  }
  
  if (hasCorrectPitchCorrection) {
    console.log('‚úÖ Configura√ß√£o pitchCorrectionQuality correta');
  } else {
    console.log('‚ùå Configura√ß√£o pitchCorrectionQuality incorreta');
  }
  
  console.log('‚úÖ AudioServiceEnhanced.ts existe e est√° configurado');
} else {
  console.log('‚ùå AudioServiceEnhanced.ts n√£o existe');
}

console.log('\nüéâ Teste de configura√ß√£o conclu√≠do!');
console.log('\nüìù Pr√≥ximos passos:');
console.log('1. Execute: npm start');
console.log('2. Verifique se n√£o h√° mais erros de configura√ß√£o');
console.log('3. Teste a reprodu√ß√£o de √°udio'); 