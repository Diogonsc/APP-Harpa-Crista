#!/usr/bin/env node

console.log('üîç Verificando implementa√ß√£o de √°udio apenas com expo-av...\n');

// Verificar se expo-av est√° instalado
try {
  const packageJson = require('../package.json');
  const hasExpoAv = packageJson.dependencies && packageJson.dependencies['expo-av'];
  const hasTrackPlayer = packageJson.dependencies && packageJson.dependencies['react-native-track-player'];

  if (hasExpoAv) {
    console.log('‚úÖ expo-av est√° instalado');
  } else {
    console.log('‚ùå expo-av N√ÉO est√° instalado');
  }

  if (hasTrackPlayer) {
    console.log('‚ö†Ô∏è  react-native-track-player ainda est√° instalado (ser√° removido)');
  } else {
    console.log('‚úÖ react-native-track-player foi removido');
  }
} catch (error) {
  console.log('‚ùå Erro ao ler package.json:', error.message);
}

// Verificar configura√ß√µes no app.json
try {
  const appJson = require('../app.json');
  const iosConfig = appJson.expo.ios;
  const androidConfig = appJson.expo.android;

  if (iosConfig && iosConfig.infoPlist && iosConfig.infoPlist.UIBackgroundModes) {
    if (iosConfig.infoPlist.UIBackgroundModes.includes('audio')) {
      console.log('‚úÖ Configura√ß√£o iOS para √°udio em segundo plano est√° correta');
    } else {
      console.log('‚ùå Configura√ß√£o iOS para √°udio em segundo plano est√° incorreta');
    }
  } else {
    console.log('‚ùå Configura√ß√£o iOS para √°udio em segundo plano n√£o encontrada');
  }

  if (androidConfig && androidConfig.permissions) {
    const hasWakeLock = androidConfig.permissions.includes('WAKE_LOCK');
    const hasModifyAudio = androidConfig.permissions.includes('android.permission.MODIFY_AUDIO_SETTINGS');
    
    if (hasWakeLock && hasModifyAudio) {
      console.log('‚úÖ Configura√ß√£o Android para √°udio em segundo plano est√° correta');
    } else {
      console.log('‚ùå Configura√ß√£o Android para √°udio em segundo plano est√° incorreta');
    }
  } else {
    console.log('‚ùå Configura√ß√£o Android para √°udio em segundo plano n√£o encontrada');
  }
} catch (error) {
  console.log('‚ùå Erro ao ler app.json:', error.message);
}

// Verificar arquivos de implementa√ß√£o
const fs = require('fs');
const filesToCheck = [
  'src/services/audioServiceEnhanced.ts',
  'src/contexts/AudioContext.tsx',
  'src/components/FloatingPlayer.tsx',
  'src/components/ExpandedPlayer.tsx',
  'src/components/MediaNotification.tsx',
  'index.js'
];

const filesToRemove = [
  'src/services/trackPlayerService.ts',
  'src/services/trackPlayerEvents.ts',
  'src/services/trackPlayerInit.ts'
];

console.log('\nüìÅ Verificando arquivos de implementa√ß√£o:');
filesToCheck.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} N√ÉO existe`);
  }
});

console.log('\nüóëÔ∏è  Verificando arquivos removidos:');
filesToRemove.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚ö†Ô∏è  ${file} ainda existe (deve ser removido)`);
  } else {
    console.log(`‚úÖ ${file} foi removido`);
  }
});

console.log('\nüéâ Verifica√ß√£o conclu√≠da!');
console.log('\nüìù Pr√≥ximos passos:');
console.log('1. Execute: npm start');
console.log('2. Teste a reprodu√ß√£o de um √°udio');
console.log('3. Saia do app e verifique se o √°udio continua');
console.log('4. Teste os controles no FloatingPlayer e ExpandedPlayer');
console.log('5. Verifique se n√£o h√° mais erros de runtime'); 