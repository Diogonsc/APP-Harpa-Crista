#!/usr/bin/env node

/**
 * Script de teste para verificar a implementa√ß√£o de √°udio em segundo plano
 * Execute este script para verificar se todas as depend√™ncias e configura√ß√µes est√£o corretas
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando implementa√ß√£o de √°udio em segundo plano...\n');

// Verificar se react-native-track-player est√° instalado
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const hasTrackPlayer = packageJson.dependencies && packageJson.dependencies['react-native-track-player'];

if (hasTrackPlayer) {
  console.log('‚úÖ react-native-track-player est√° instalado');
} else {
  console.log('‚ùå react-native-track-player N√ÉO est√° instalado');
  console.log('   Execute: npm install react-native-track-player');
}

// Verificar configura√ß√µes no app.json
const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
const iosConfig = appJson.expo.ios;
const androidConfig = appJson.expo.android;

let iosOk = false;
let androidOk = false;

if (iosConfig && iosConfig.infoPlist && iosConfig.infoPlist.UIBackgroundModes) {
  if (iosConfig.infoPlist.UIBackgroundModes.includes('audio')) {
    console.log('‚úÖ Configura√ß√£o iOS para √°udio em segundo plano est√° correta');
    iosOk = true;
  } else {
    console.log('‚ùå Configura√ß√£o iOS para √°udio em segundo plano est√° incorreta');
  }
} else {
  console.log('‚ùå Configura√ß√£o iOS para √°udio em segundo plano n√£o encontrada');
}

if (androidConfig && androidConfig.permissions) {
  const hasWakeLock = androidConfig.permissions.includes('WAKE_LOCK');
  const hasModifyAudio = androidConfig.permissions.includes('android.permission.MODIFY_AUDIO_SETTINGS');
  
  if (hasWakeLock && hasModifyAudio) {
    console.log('‚úÖ Configura√ß√£o Android para √°udio em segundo plano est√° correta');
    androidOk = true;
  } else {
    console.log('‚ùå Configura√ß√£o Android para √°udio em segundo plano est√° incorreta');
  }
} else {
  console.log('‚ùå Configura√ß√£o Android para √°udio em segundo plano n√£o encontrada');
}

// Verificar arquivos de implementa√ß√£o
const filesToCheck = [
  'src/services/trackPlayerService.ts',
  'src/services/trackPlayerEvents.ts',
  'src/contexts/AudioContext.tsx',
  'src/components/FloatingPlayer.tsx',
  'src/components/ExpandedPlayer.tsx',
  'index.js'
];

let filesOk = 0;
filesToCheck.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
    filesOk++;
  } else {
    console.log(`‚ùå ${file} N√ÉO existe`);
  }
});

// Resumo
console.log('\nüìä Resumo:');
console.log(`- TrackPlayer instalado: ${hasTrackPlayer ? 'Sim' : 'N√£o'}`);
console.log(`- Configura√ß√£o iOS: ${iosOk ? 'OK' : 'Problema'}`);
console.log(`- Configura√ß√£o Android: ${androidOk ? 'OK' : 'Problema'}`);
console.log(`- Arquivos de implementa√ß√£o: ${filesOk}/${filesToCheck.length}`);

if (hasTrackPlayer && iosOk && androidOk && filesOk === filesToCheck.length) {
  console.log('\nüéâ Tudo configurado corretamente!');
  console.log('A implementa√ß√£o de √°udio em segundo plano deve funcionar.');
} else {
  console.log('\n‚ö†Ô∏è  H√° problemas na configura√ß√£o.');
  console.log('Verifique os itens marcados com ‚ùå acima.');
}

console.log('\nüìù Pr√≥ximos passos:');
console.log('1. Execute: npm start');
console.log('2. Teste a reprodu√ß√£o de um √°udio');
console.log('3. Saia do app e verifique se a notifica√ß√£o aparece');
console.log('4. Use os controles da notifica√ß√£o para controlar o √°udio'); 