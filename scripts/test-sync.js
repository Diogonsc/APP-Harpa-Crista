const { SyncService } = require('../src/services/syncService');
const { LocalStorageService } = require('../src/services/localStorageService');

async function testSyncSystem() {
  console.log('üß™ Iniciando testes do sistema de sincroniza√ß√£o...\n');

  try {
    // Teste 1: Verificar estat√≠sticas iniciais
    console.log('1Ô∏è‚É£ Verificando estat√≠sticas iniciais...');
    const initialStats = await SyncService.getSyncStats();
    console.log('Estat√≠sticas iniciais:', initialStats);
    console.log('');

    // Teste 2: Verificar se precisa sincronizar
    console.log('2Ô∏è‚É£ Verificando se precisa sincronizar...');
    const needsSync = await SyncService.needsSync();
    console.log('Precisa sincronizar:', needsSync);
    console.log('');

    // Teste 3: Verificar conectividade
    console.log('3Ô∏è‚É£ Verificando conectividade com a internet...');
    const hasInternet = await SyncService.checkInternetConnection();
    console.log('Tem internet:', hasInternet);
    console.log('');

    // Teste 4: Sincroniza√ß√£o inteligente
    console.log('4Ô∏è‚É£ Testando sincroniza√ß√£o inteligente...');
    const smartSyncResult = await SyncService.smartSync({
      onProgress: (progress) => {
        console.log(`üìä Progresso: ${progress.currentPage}/${progress.totalPages} p√°ginas (${progress.currentHinos} hinos)`);
      },
      onComplete: (result) => {
        console.log('‚úÖ Sincroniza√ß√£o conclu√≠da:', result);
      }
    });
    console.log('Resultado da sincroniza√ß√£o inteligente:', smartSyncResult);
    console.log('');

    // Teste 5: Verificar estat√≠sticas ap√≥s sincroniza√ß√£o
    console.log('5Ô∏è‚É£ Verificando estat√≠sticas ap√≥s sincroniza√ß√£o...');
    const finalStats = await SyncService.getSyncStats();
    console.log('Estat√≠sticas finais:', finalStats);
    console.log('');

    // Teste 6: Testar busca local
    console.log('6Ô∏è‚É£ Testando busca local...');
    const localHinos = await LocalStorageService.loadHinos();
    console.log(`Total de hinos no cache local: ${localHinos.length}`);
    
    if (localHinos.length > 0) {
      const firstHino = localHinos[0];
      console.log('Primeiro hino:', firstHino);
      
      // Testar busca por n√∫mero
      const hinoPorNumero = await LocalStorageService.getHinoByNumber(firstHino.numero);
      console.log('Hino encontrado por n√∫mero:', hinoPorNumero ? 'Sim' : 'N√£o');
      
      // Testar busca por texto
      const buscaResult = await LocalStorageService.searchHinos('louvor');
      console.log(`Busca por "louvor" encontrou ${buscaResult.length} hinos`);
    }
    console.log('');

    // Teste 7: Verificar validade do cache
    console.log('7Ô∏è‚É£ Verificando validade do cache...');
    const cacheValid = await LocalStorageService.isCacheValid();
    console.log('Cache v√°lido:', cacheValid);
    console.log('');

    console.log('‚úÖ Todos os testes conclu√≠dos com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Fun√ß√£o para testar cen√°rios espec√≠ficos
async function testSpecificScenarios() {
  console.log('\nüîç Testando cen√°rios espec√≠ficos...\n');

  try {
    // Cen√°rio 1: Simular sem internet
    console.log('üì± Cen√°rio 1: Simulando sem internet...');
    // Aqui voc√™ pode simular desconex√£o de rede
    
    // Cen√°rio 2: Testar limpeza de cache
    console.log('üóëÔ∏è Cen√°rio 2: Testando limpeza de cache...');
    await LocalStorageService.clearCache();
    const statsAfterClear = await SyncService.getSyncStats();
    console.log('Estat√≠sticas ap√≥s limpeza:', statsAfterClear);
    
    // Cen√°rio 3: Testar sincroniza√ß√£o for√ßada
    console.log('üîÑ Cen√°rio 3: Testando sincroniza√ß√£o for√ßada...');
    const forceSyncResult = await SyncService.forceSync({
      onProgress: (progress) => {
        console.log(`üîÑ For√ßando sincroniza√ß√£o: ${progress.currentPage}/${progress.totalPages}`);
      }
    });
    console.log('Resultado da sincroniza√ß√£o for√ßada:', forceSyncResult);

  } catch (error) {
    console.error('‚ùå Erro nos cen√°rios espec√≠ficos:', error);
  }
}

// Executar testes
async function runAllTests() {
  await testSyncSystem();
  await testSpecificScenarios();
}

// Executar se chamado diretamente
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  testSyncSystem,
  testSpecificScenarios,
  runAllTests
}; 